generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id      Int    @id @default(autoincrement())
  comment String
  user_id Int
  post_id Int
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments")
  posts   posts  @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_post")
}

model hashtags {
  id    Int     @id @default(autoincrement())
  label String?
}

model likes {
  id      Int   @id @default(autoincrement())
  user_id Int
  post_id Int
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_likes")
  posts   posts @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_likes_post")
}

model posts {
  id            Int             @id(map: "products_pkey") @default(autoincrement())
  description   String?
  url_pictures  String?
  user_id       Int?
  hashtag       String?
  created_at    DateTime?       @db.Date
  updated_at    DateTime?       @db.Date
  comments      comments[]
  likes         likes[]
  posts_hastags posts_hastags[]
}

model posts_hastags {
  id          Int     @id @default(autoincrement())
  id_posts    String?
  id_hashtags String?
}

model status {
  id      Int     @id @default(autoincrement())
  role    String?
  role_id Int?
  users   users?  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")
}

model users {
  id             Int        @id @default(autoincrement())
  firstname      String
  lastname       String
  email          String
  password       String
  status_id      String
  user_biography String?
  created_at     DateTime   @default(now()) @db.Timestamp(6)
  updated_at     DateTime   @default(now()) @db.Timestamp(6)
  comments       comments[]
  likes          likes[]
  status         status[]
}

model comments {
  id      Int    @id @default(autoincrement())
  comment String
  user_id Int
  post_id Int
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments")
  posts   posts  @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_post")
}

model likes {
  id      Int   @id @default(autoincrement())
  user_id Int
  post_id Int
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_likes")
  posts   posts @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_likes_post")
}

model hashtags {
  id            Int             @id @default(autoincrement())
  label         String?
  posts_hastags posts_hastags[]
}

model posts_hastags {
  id          Int       @id @default(autoincrement())
  id_posts    Int?
  id_hashtags Int?
  posts       posts?    @relation(fields: [id_posts], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "constraint_1")
  hashtags    hashtags? @relation(fields: [id_hashtags], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_posts_hashtags_hashtag")
}
